entities:
  seaf.ba.ttl:
    schema:
      type: object
      patternProperties:
        ^[0-9a-zA-Z][a-zA-Z0-9_-]*(\.[a-zA-Z][a-zA-Z0-9_-]*)*$:
          properties:
            title:
              title: object title
              description: human given name
              type: string
            description:
              title: short description
              description: One to three sentences with no structural formatting
              type: string
          required:
            - title
  # todo Необходимо привести в соответствие с соглашением по идентификации
  hexV:
    # menu: >
    #   ( /*
    #     $seaf.ba.ttlMenu:= []; /*placeholder for seaf.ba.ttl control menu items*/

    #     $menu:= $map($eval($$.hexF.nodes)[$.body.side != null], function($v) {(
    #                               $map($v.body.side, function($vv) {
    #                                 { "link": "/entities/hexV/" & $vv.presentation & "?id=" & $v.id,
    #                                   "location": "hex 1.0/Views/" & $vv.item
    #                                 }
    #                               })
    #     )});
    #     $menu:= $reduce($menu, $append);

    #     $append($seaf.ba.ttlMenu, $menu)
    #     */
    #   )
    presentations:
      view:
        type: markdown
        template: templates/view.md
        source: >
          (
            /*link: /entities/hexV/view??id=vId&mode=mode_x.mode_y*/

            /*CHECK PARAMS*/
              $vId:= $params.id; $modes_selected:= $params.mode;

              /*if mode is multileveled, then get array of mode levels from top to bottom*/
              $modes_selected:= $split($modes_selected, ".");

              /*get view object and check if hexV is well formed*/
              $view:= $lookup($$."seaf.ba.ttl", $vId);
              $not($exists($view.hexV)) ? {"error": "Object **" & $vId & "** has no view configuration (hexV)"} :
                $count($view.hexV) = 0 ? {"error": "Object **" & $vId & "** has empty view configuration (hexV)"} :
            /*PARAMS WELL FORMED*/

                (
                  /*GET SELECTED MODE'S PATTERN */
                    /*get modes tree*/
                    $chunks:= $distinct($view.hexV.**.modes.%.{"h": $.title, "l": $.modes.title});
                    $patternPre:= $count($chunks) > 0 ? 
                      /*mode defined*/
                      (
                        $chunks:= $map($chunks, function($v) {
                          $map($v.l, function($vv) {(
                            {"source": $v.h ? $v.h : "viewRoot", "target": $vv, "label": "moded"}
                          )})
                        });
                        $chains:= $eval($$.hexF.getChains, {"edges": $reduce($chunks, $append)});
                        $maxChain:= function($max, $v) {$count($v.path) > $max ? $count($v.path) : $max};
                        $v_dim:= $reduce($chains, $maxChain, 0);
                        $leveling:= function($chains, $ci, $v_dim, $matrix) {(
                          $level:= $map($chains, function($v){(
                            $ch:= $map($v.path[[0..$ci]], function($vv){$vv != "viewRoot" and $vv != "moded" ? $vv});
                            $v.path[$ci] ? {"chain": $ch, "b": $v.path[$ci-2], "l":$v.path[$ci]} : null
                          )});
                          $matrix:= $append($matrix, {"lev_" & $ci/2:$distinct($level)[$ != null]});
                          $ci< $v_dim-1 ? $leveling($chains, $ci+2, $v_dim, $matrix) : $matrix;
                        )};
                        $modes:= $leveling($chains, 2, $v_dim, []);
                        $modes:= $map($modes, function($v, $i) {(
                          $row:= $map($v.*, function($vv) {
                            $vv.b = "viewRoot" or $vv.b = $modes_selected[$i-1] ? 
                              {"level": $eval($replace($keys($v), "lev_", "")), "chain": $encodeUrl($join($vv.chain, ".")), "b": $vv.b, "title": $vv.l, "description": $view.hexV.**.modes[$.title = $vv.l].description, "selected": $vv.l = $modes_selected[$i] ? true : false}
                          });
                          $row ? (true in $row.selected ? {"row": $row} : {"row": $row~>|$[0]|{"selected": true}|})
                        )});
                        $assemblyMode:= $modes.**.selected[$=true].%.title; 
                        $patternNodes:= $keys($merge($view.**.hexV.%[$.title in $assemblyMode].hexV)); 
                        {"vId": $vId, "body": $view~>|$|{}, ["hexV"]|, "modes": $modes, "patternPre": $patternNodes}
                      ) : 
                      /*modes undefined*/
                      {"vId": $vId, "body": $view~>|$|{}, ["hexV"]|, "patternPre": $keys($view.hexV)};
                  /*SELECTED MODE's PATTERN EXTRACTED*/
                    
                    /*restore hexR object*/                  
                    $patternPre:= $patternPre~>|$|{"patternPre": $append($.patternPre, [{"hexR": $patternPre.modes ? $view.hexV.modes.**[$.title=$patternPre.modes.*[$.selected].title].hexV.hexR : $view.hexV.hexR}])}|;

                  /*GET VIEW DATA*/
                    $r:= $eval($$.hexF.resolveView, {"patternPre": $patternPre.patternPre});

                    /*prepare view data for template*/
                    $patternPre~>|$|{"resView": {"pattern": $encodeUrl($string($r.pattern)), "landscape": $encodeUrl($string($r.landscape))}}, ["patternPre"]|
                    
                ) 
          )

      pattern_graph:
        type: PlantUml
        template: templates/pattern_graph.puml
        source: >
          (
            $str:= $params.data;
            $data:= $eval($decodeUrl($str));
          )

      landscape_graph:
        type: PlantUml
        template: templates/landscape_graph.puml
        source: >
          (
            $str:= $params.data;
            $data:= $eval($decodeUrl($str));
          )
    # schema:
    #   type: object
    #   patternProperties:
    #     ^[0-9a-zA-Z][a-zA-Z0-9_-]*(\.[a-zA-Z][a-zA-Z0-9_-]*)*$:
    #       oneOf:
    #         - type: object
    #           properties:
    #             title:
    #               title: Название документа
    #               type: string
    #             location:
    #               title: Место расположения в меню
    #               type: string
    #             icon:
    #               title: Иконка в меню
    #               type: string
    #             type:
    #               title: Тип документа
    #               type: string
    #             subjects:
    #               title: Принадлежит объектам
    #               type: array
    #               items:
    #                 type: string
    #             source:
    #               title: Источник данный (запрос или dataset)
    #               type: string
    #               oneOf:
    #                 - type: string
    #                   title: Идентификатор dataset
    #                   pattern: ^[0-9a-zA-Z][a-zA-Z0-9 ]*(\.[a-zA-Z][a-zA-Z0-9\_]*)*$
    #                 - type: string
    #                   title: JSONata запрос
    #                   pattern: \s*\((.|\s)*\)\s*
    #           required:
    #             - source
    #         - type: object
    #           properties:
    #             title:
    #               title: Название документа
    #               type: string
    #             location:
    #               title: Место расположения в меню
    #               type: string
    #             icon:
    #               title: Иконка в меню
    #               type: string
    #             type:
    #               title: Тип документа
    #               type: string
    #             subjects:
    #               title: Принадлежит объектам
    #               type: array
    #               items:
    #                 type: string
    #             template:
    #               title: Путь к файлу шаблона
    #               type: string
    #             source:
    #               title: Данные для шаблона
    #               type: string
    #               oneOf:
    #                 - type: string
    #                   title: Идентификатор dataset
    #                   pattern: ^[0-9a-zA-Z][a-zA-Z0-9 ]*(\.[a-zA-Z][a-zA-Z0-9\_]*)*$
    #                 - type: string
    #                   title: JSONata запрос
    #                   pattern: \s*\((.|\s)*\)\s*
    #           required:
    #             - template
    #             - source
    #   additionalProperties: false
    # presentations:
    #   blank:
    #     title: Представление документа
    #     params:
    #       title: Требуемые параметры для презентации
    #       type: object
    #       properties:
    #         id:
    #           title: Идентификатор документа
    #           type: string
    #           pattern: ^[0-9a-zA-Z][a-zA-Z0-9_-]*(\.[a-zA-Z][a-zA-Z0-9_-]*)*$
    #       required:
    #         - id
    #     $constructor: |
    #       (
    #         /* Получаем объект документа */ 
    #         $doc := $lookup($$.articles, $params."id");
    #         /* Для рендера берем за основу объект документа */
    #         $merge([$doc, (
    #           {
    #             "$base": "/articles/" & $params."id"
    #           }
    #         )])
    #       )

  # todo Необходимо привести в соответствие с соглашением по идентификации
  observable:
    # menu: >
    #   (
    #     $treePaths:= function($nested, $items, $i, $path) {(
    #       $path:= $nested[$i] ? $path & "/" & $nested[$i].title; $log($path, $i);
    #       $items:= $nested[$i].link ? $append($items, {"location": $path, "link": $nested[$i].link}): $items;
    #       $items:= $count($nested[$i].includes) > 0 ?
    #         $append($items, $treePaths($nested[$i].includes, [], 0, $path)): 
    #         $append( $items, {"location": $path, "link":$nested[$i].link});
    #       $i<$count($nested)-1 ? $treePaths($nested, $items, $i+1, $substringBefore($path, "/" & $nested[$i].title)) : $items
    #     )}; 
    #     $log($$.hexNav);
    #     $menu:= $treePaths($$.hexNav, [], 0, "Hexagon");
    #   )

    menu: >
      (
        $treePaths:= function($nested, $items, $i, $path) {(
          $path:= $path!="" and $nested[$i] ? $path & "/" & $nested[$i].title : $path="" and $nested[$i] ? $nested[$i].title; 
          $items:= $nested[$i].link ? $append($items, {"location": $path, "link": $nested[$i].link}): $items;
          $items:= $count($nested[$i].includes) > 0 ?
            $append($items, $treePaths($nested[$i].includes, [], 0, $path)): 
            $items;
          $i<$count($nested)-1 ? $treePaths($nested, $items, $i+1, $substringBefore($path, "/" & $nested[$i].title)) : $items
        )}; 

        $menu:= $reduce($map($$.hexNav, function($v) {(
          $distinct($treePaths($v, [], 0, ""))
        )}), $append)
      )



    presentations:
      bages:
        type: markdown
        template: templates/bages.md
          
      bages_icons:
        type: PlantUml
        template: templates/bages.puml
        source: >
          (
            {"bages": $map($spread($$.hexBages), function($v) {
                        {"bId": $keys($v), "svg": $v.*}
                      })
            }
          )


# todo Нужно привести в соответствие с соглашением по идентификации
# todo Должна быть декларирована сущность
hexNav:
  - title: Документы/Hexagon
    link: "/entities/docs/blank?dh-doc-id=hex_main"
    includes:
      - title: Dashboards
        link: 
        params:
        includes:
          - title: Bages Icons
            link: "entities/observable/bages"

