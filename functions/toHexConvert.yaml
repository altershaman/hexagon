hexF:

# converted entities final assembly
#todo edges converters to standartaze to use configs
  toHexNodes: >
    (
      $seaf_objects:= [
        {"seaf_parties": $$."seaf.ba.parties"},
        {"seaf_products": $$."seaf.ba.products"},
        {"seaf_processes": $$."seaf.ba.processes"},
        {"seaf_requirements": $$."seaf.change.requirements"},
        {"seaf_apps": $merge($$."components".$spread()[$.*.type = "service"])},
        {"seaf_biz_obj": $$."seaf.ia.business_objects"},
        {"seaf_capabilities": $$."seaf.bbb.capabilities"},
        {"seaf_bapies": $$."seaf.bbb.b_api"}
      ];


      $hex_objects:= $map($seaf_objects, function($v){(
                        $count($v.$keys()) > 0 ?
                        {"hex" & $substringAfter($v.$keys(), "seaf"): $entity_to_ttl($merge($v.*))}
                      )});

      $seafToHexRels_config:= [
        { "source": $hex_objects.hex_parties,
          "target": "mm.party",
          "label": "map"
        },
        { "source": $hex_objects.hex_products,
          "target": "mm.product",
          "label": "map"
        },
        { "source": $hex_objects.hex_requirements,
          "target": "mm.requirement",
          "label": "map"
        },
        { "source": $hex_objects.hex_apps,
          "target": "mm.resource",
          "label": "map"
        },
        { "source": $hex_objects.hex_apps,
          "target": "mm.resource.app_service",
          "label": "map"
        },
        { "source": $hex_objects.hex_biz_obj,
          "target": "mm.resource",
          "label": "map"
        },
        { "source": $hex_objects.hex_biz_obj,
          "target": "mm.resource.data",
          "label": "map"
        },
        { "source": $hex_objects.hex_capabilities,
          "target": "mm.capability",
          "label": "map"
        },
        { "source": $hex_objects.hex_bapies,
          "target": "mm.bapi",
          "label": "map"
        },
        { "source": $hex_objects.hex_parties,
          "target": "$.*.is_part_of",
          "label": "является частью"
        }
      ];

      $hex_nodes:= $hex_objects.*
    )
  toHexEdges: >
    (
      $fromParties:= $eval($$.hexF.partiesToEdges);
      $fromProducts:= $eval($$.hexF.productsToEdges);
      $fromProcesses:= $eval($$.hexF.processesToEdges);
      $fromFacades:= $eval($$.hexF.facadesToEdges);
      $fromBizObjects:= $eval($$.hexF.biz_objToEdges);
      $fromCapabilities:= $eval($$.hexF.capabilitiesToEdges);
      $fromBapies:= $eval($$.hexF.bapiesToEdges);
      $fromApps:= $eval($$.hexF.appsToEdges);

      $accum:= $append($fromParties, $fromProducts);
      $accum:= $append($accum, $fromProcesses);
      $accum:= $append($accum, $fromBizObjects);
      $accum:= $append($accum, $fromApps);

      $accum:= $append($accum, $fromCapabilities);
      $accum:= $append($accum, $fromBapies);
      $accum:= $append($accum, $fromFacades);
    )

# from SEAF-CORE to Hex Converters
  # partiesToParty_ttl: >
  #   (
  #     $kadzo_products:= $$."seaf.ba.parties".$spread();
  #     $map($kadzo_products, function($v){
  #       { "id": $keys($v),
  #         "body": $v.* 
  #       }
  #     })
  #   )

#todo добавить конвертацию reports
  partiesToEdges: >
    (
      $kadzo_parties:= $$."seaf.ba.parties".$spread();
      $reduce([$map($kadzo_parties, function($v){(
        
        $maps:= {
          "source": $keys($v),
          "target": "mm.party",
          "label": "map"
        };

        $interested:= $v.*.has_interest;
        $interested:= $map($interested, function($vv) {
          { "source": $keys($v),
            "target": $vv,
            "label":"заинтересован" 
          }
        });

        $is_part:= $v.*.is_part_of;
        $is_part:= $map($is_part, function($vv) {
          { "source": $keys($v),
            "target": $vv,
            "label":"является частью" 
          }
        });


        $relates:= $v.*.relates;
        $relates:= $map($relates, function($vv) {
          { "source": $keys($v),
            "target": $vv,
            "label":"относится к" 
          }
        });

        $converted:= $append($interested, $relates);
        $converted:= $append($converted, $maps);
        $converted:= $append($converted, $is_part)
      )})], $append)
    )

  # productsToProduct_ttl: >
  #   (
  #     $kadzo_products:= $$."seaf.ba.products".$spread();
  #     $map($kadzo_products, function($v){
  #       { "id": $keys($v),
  #         "body": $v.* 
  #       }
  #     })
  #   )

  productsToEdges: >
    (
      $kadzo_products:= $$."seaf.ba.products".$spread();
      $reduce([$map($kadzo_products, function($v){(

      $maps:= {
          "source": $keys($v),
          "target": "mm.product",
          "label": "map"
        };

        
        $owner:= $v.*.owner;
        $owner:= {"source": $keys($v),
                  "target": $owner,
                  "label":"владелец" 
                 };

        $used:= $v.*.used_in;
        $used:= $map($used, function($vv) {
          { "source": $keys($v),
            "target": $vv,
            "label":"потребляется в составе" 
          }
        });

        $converted:= $append($owner, $used);
        $append($converted, $maps);
      )})], $append)
    )

  # processesToProcess_ttl: >
  #   (
  #     $seaf_core_processes:= $$."seaf.ba.processes".$spread();
  #     $map($seaf_core_processes, function($v){
  #       { "id": $keys($v),
  #         "body": $v.* 
  #       }
  #     })
  #   )

  processesToEdges: >
    (
      $seaf_core_processes:= $$."seaf.ba.processes".$spread();
      $reduce([$map($seaf_core_processes, function($v){(

      $maps:= {
          "source": $keys($v),
          "target": "mm.process",
          "label": "map"
        };
        
        $owner:= $v.*.owner;
        $owner:= $owner != null ? {"source": $keys($v),
                                    "target": $owner,
                                    "label":"владелец" 
                                  };
                                  
        $is_part:= $v.*.is_part_of;
        $is_part:= $map($is_part, function($vv) {
          { "source": $keys($v),
            "target": $vv,
            "label":"является частью" 
          }
        });

        $next:= $v.*.next_processes;
        $next:= $map($next, function($vv) {
          { "source": $keys($v),
            "target": $vv,
            "label":"поток работ" 
          }
        });

        $automated:= $v.*.systems;
        $automated:= $map($automated, function($vv) {
          { "target": $keys($v),
            "source": $vv,
            "label":"поддерживает" 
          }
        });

        $reqs:= $v.*.requirements;
        $reqs:= $map($reqs, function($vv) {
          { "source": $keys($v),
            "target": $vv,
            "label": "требует"
          }
        });

        $products:= $v.*.products;
        $products:= $map($products, function($vv) {
          { "source": $keys($v),
            "target": $vv,
            "label": "поддерживает"
          }
        });


        $converted:= $append($maps, $owner);
        $converted:= $append($converted, $is_part);
        $converted:= $append($converted, $next);
        $converted:= $append($converted, $automated);
        $converted:= $append($converted, $reqs);
        $converted:= $append($converted, $products);

      )})], $append)
    )

  # requirementsToRequirement_ttl: >
  #   (
  #     $seaf_core_requirements:= $$."seaf.change.requirements".$spread();
  #     $map($seaf_core_requirements, function($v){
  #       { "id": $keys($v),
  #         "body": $v.* 
  #       }
  #     })
  #   )

  requirementsToEdges: >
    (
      $seaf_core_requirements:= $$."seaf.change.requirements".$spread();
      $map($seaf_core_requirements, function($v) {
        $maps:= {
                  "source": $keys($v),
                  "target": "mm.requirement",
                  "label": "map"
                }
      })
    )

  biz_objToEdges: >
    (
      $biz_obj:= $$."seaf.ia.business_objects".$spread();
      $reduce([$map($biz_obj, function($v){(

      $maps:= {
          "source": $keys($v),
          "target": "mm.resource",
          "label": "map"
        };

      $maps2:= {
          "source": $keys($v),
          "target": "mm.resource.data",
          "label": "map"
        };

  

        $processes:= $v.*.processes;
        $processes:= $map($processes, function($vv) {
          { "source": $keys($v),
            "target": $vv,
            "label":"поддерживает" 
          }
        });

        $converted:= $append($processes, $maps);
        $append($converted, $maps2);
      )})], $append)
    )

  appsToEdges: >
    (
      $apps:= $$."components".$spread()[$.*.type = "service"];
      $reduce([$map($apps, function($v){(

      $maps:= {
          "source": $keys($v),
          "target": "mm.resource",
          "label": "map"
        };

      $maps2:= {
          "source": $keys($v),
          "target": "mm.resource.app_service",
          "label": "map"
        };

        $processes:= $v.*.processes;
        $processes:= $map($processes, function($vv) {
          { "source": $keys($v),
            "target": $vv,
            "label":"поддерживает" 
          }
        });

        $requirements:= $v.*.requirements;
        $requirements:= $map($requirements, function($vv) {
          { "source": $keys($v),
            "target": $vv,
            "label":"удовлетворяет" 
          }
        });


        $converted:= $append($processes, $maps);
        $converted:= $append($converted, $maps2);
        $converted:= $append($converted, $requirements);

      )})], $append)
    )



# from BBB to hex converters

  # capabilitiesToCapability_ttl: >
  #   (
  #     $seaf_bbb_capabilities:= $$."seaf.bbb.capabilities".$spread();
  #     $map($seaf_bbb_capabilities, function($v){
  #       { "id": $keys($v),
  #         "body": $v.* 
  #       }
  #     })
  #   )

  capabilitiesToEdges: >
    (
      $seaf_bbb_capabilities:= $$."seaf.bbb.capabilities".$spread();
      $reduce([$map($seaf_bbb_capabilities, function($v){(

      $maps:= {
          "source": $keys($v),
          "target": "mm.capability",
          "label": "map"
        };
        
        
        $owner:= $v.*.owner;
        $owner:= $owner != null ? {"source": $keys($v),
                                    "target": $owner,
                                    "label":"владелец" 
                                  };
                                  
        $hi_cap:= $v.*.relates;
        $hi_cap:= $hi_cap != null ? {"source": $keys($v),
                                        "target": $hi_cap,
                                        "label":"относится к" 
                                    };

        $api_used:= $v.*.use_b_apies;
        $api_used:= $map($api_used, function($vv) {
          { "source": $keys($v),
            "target": $vv,
            "label":"использует" 
          }
        });

        $api_provided:= $v.*.provide_b_apies;
        $api_provided:= $map($api_provided, function($vv) {
          { "source": $keys($v),
            "target": $vv,
            "label":"предоставляет" 
          }
        });


        $process_comp:= $v.*.used_in;
        $process_comp:= $map($process_comp, function($vv) {
          { "source": $keys($v),
            "target": $vv,
            "label":"используется в" 
          }
        });

        $converted:= $append($maps, $owner);
        $converted:= $append($converted, $hi_cap);
        $converted:= $append($converted, $api_used);
        $converted:= $append($converted, $api_provided);
        $converted:= $append($converted, $process_comp);

      )})], $append)

    )

  # bapiesToBapi_ttl: >
  #   (
  #     $seaf_bbb_bapies:= $$."seaf.bbb.b_api".$spread();
  #     $map($seaf_bbb_bapies, function($v){
  #       { "id": $keys($v),
  #         "body": $v.* 
  #       }
  #     })
  #   )

  bapiesToEdges: >
    (
      $seaf_bbb_bapies:= $$."seaf.bbb.b_api".$spread();
      $reduce([$map($seaf_bbb_bapies, function($v){(

      $maps:= {
          "source": $keys($v),
          "target": "mm.bapi",
          "label": "map"
        };
      /*  
        $hi_cap:= $v.*.relates;
        $hi_cap:= $hi_cap != null ? {"source": $keys($v),
                                     "target": $hi_cap,
                                     "label":"предоставляется" 
                                    };

        $converted:= $append($maps, $hi_cap);
      */  
      )})], $append)

    )

  facadesToEdges: >
    (
        $products_facade:= $$."seaf.ba.products".$spread()[$.*.facade];
        $products_in_facades:= $$."seaf.facades".$map($, function($v) {$$."seaf.ba.products".$spread()[$keys($) = $v ]});
        $product_facade:= $append($products_facade, $products_in_facades);
        $product_facades:=  $map($product_facade, function($v) {
                      { "source": $keys($v),
                        "target": "mm.facade",
                        "label":"является" 
                      } 
                    });   

        $parties_facade:= $$."seaf.ba.parties".$spread()[$.*.facade];
        $parties_in_facades:= $$."seaf.facades".$map($, function($v) {$$."seaf.ba.parties".$spread()[$keys($) = $v ]});
        $party_facade:= $append($parties_facade, $parties_in_facades);
        $party_facades:=  $map($party_facade, function($v) {
                      { "source": $keys($v),
                        "target": "mm.facade",
                        "label":"является" 
                      } 
                    });

        $append($product_facades, $party_facades);

    )



functions:

  entity_to_ttl:
    title: Converts DH Entity to hex.ttl entity 
    params:
      - type: object
        title: $$.<entity_id>
        alias: objects
        required: true
    code: >
      (
          $objects:= objects.$spread();

          $ttl_nodes:= $map($objects, function($v){
                          { "id": $keys($v),
                            "body": $v.* 
                          }
                        });

          $count($ttl_nodes) > 0
            ? [$ttl_nodes]
            : []
      )
    result:
      type: array
      description: array of ttl objects (nodes) 
