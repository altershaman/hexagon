hexF:

# converted entities final assembly
  toHexNodes: >
    (
      $parties:= $eval($$.hexF.partiesToParty_ttl);
      $products:= $eval($$.hexF.productsToProduct_ttl);
      $processes:= $eval($$.hexF.processesToProcess_ttl);
      $1st:= $append($parties, $products);
      $2nd:= $append($1st, $processes);
    )

  toHexEdges: >
    (
      $supports:= $eval($$.hexF.dh_componentsToHex);
      $fromParties:= $eval($$.hexF.partiesToEdges);
      $fromProducts:= $eval($$.hexF.productsToEdges);
      $fromProcesses:= $eval($$.hexF.processesToEdges);

      $accum:= $append($fromParties, $fromProducts);
      $accum:= $append($accum, $fromProcesses);
      $accum:= $append($accum, $supports);
    )

# from KADZO to Hex Converters
  partiesToParty_ttl: >
    (
      $kadzo_parties:= $$."seaf.ba.parties".$spread();
      $map($kadzo_parties, function($v){
        { "id": $keys($v),
          "body": $v.* 
        }
      })
    )

  partiesToEdges: >
    (
      $kadzo_parties:= $$."seaf.ba.parties".$spread();
      $reduce([$map($kadzo_parties, function($v){(
        
        $maps:= {
          "source": $keys($v),
          "target": "mm.party",
          "label": "map"
        };

        $interested:= $v.*.has_interest;
        $interested:= $map($interested, function($vv) {
          { "source": $keys($v),
            "target": $vv,
            "label":"" 
          }
        });

        $relates:= $v.*.relates;
        $relates:= $map($relates, function($vv) {
          { "source": $keys($v),
            "target": $vv,
            "label":"" 
          }
        });

        $converted:= $append($interested, $relates);
        $append($converted, $maps);
      )})], $append)
    )

  productsToProduct_ttl: >
    (
      $kadzo_products:= $$."seaf.ba.products".$spread();
      $map($kadzo_products, function($v){
        { "id": $keys($v),
          "body": $v.* 
        }
      })
    )

  productsToEdges: >
    (
      $kadzo_products:= $$."seaf.ba.products".$spread();
      $reduce([$map($kadzo_products, function($v){(

      $maps:= {
          "source": $keys($v),
          "target": "mm.product",
          "label": "map"
        };

        
        $owner:= $v.*.owner;
        $owner:= {"source": $keys($v),
                  "target": $owner,
                  "label":"" 
                 };

        $used:= $v.*.used_in;
        $used:= $map($used, function($vv) {
          { "source": $keys($v),
            "target": $vv,
            "label":"" 
          }
        });

        $converted:= $append($owner, $used);
        $append($converted, $maps);
      )})], $append)
    )

  processesToProcess_ttl: >
    (
      $seaf_core_processes:= $$."seaf.ba.processes".$spread();
      $map($seaf_core_processes, function($v){
        { "id": $keys($v),
          "body": $v.* 
        }
      })
    )

  processesToEdges: >
    (
      $seaf_core_processes:= $$."seaf.ba.processes".$spread();
      $reduce([$map($seaf_core_processes, function($v){(

      $maps:= {
          "source": $keys($v),
          "target": "mm.process",
          "label": "map"
        };

        
        $owner:= $v.*.owner;
        $owner:= $owner != null ? {"source": $keys($v),
                                    "target": $owner,
                                    "label":"владелец" 
                                  };
        $hi_process:= $v.*.relates;
        $hi_process:= $hi_process != null ? {"source": $keys($v),
                                                "target": $hi_process,
                                                "label":"относится к" 
                                            };

        $next:= $v.*.next_processes;
        $next:= $map($next, function($vv) {
          { "source": $keys($v),
            "target": $vv,
            "label":"поток работ" 
          }
        });

        $automated:= $v.*.systems;
        $automated:= $map($automated, function($vv) {
          { "target": $keys($v),
            "source": $vv,
            "label":"поддерживает" 
          }
        });


        $converted:= $append($maps, $owner);
        $converted:= $append($converted, $hi_process);
        $converted:= $append($converted, $next);
        $converted:= $append($converted, $automated);
      )})], $append)
    )

# Translation app layer objects links into hex
  dh_componentsToHex: >
    (
      $components:= $$.components.$spread()[$.*.entity="component"];
      $reduce($map($components, function($v) {(
        $maps:= [
          {"source": $keys($v), "target": "mm.resource", "label": "map"},
          {"source": $keys($v), "target": "mm.resource.app_service", "label": "type"}];
        $regs:= $map($v.*.processes, function($vv) {
          {"source": $keys($v), "target": $vv, "label": "поддерживает"}
        });
        $append($maps, $regs);
      )}), $append)
    )
